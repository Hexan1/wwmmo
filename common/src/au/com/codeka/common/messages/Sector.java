// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.messages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Label.REPEATED;

/**
 *
 * Represents a "sector" of space, containing a number of stars and whatnot.
 */
public final class Sector extends Message {

  public static final Long DEFAULT_X = 0L;
  public static final Long DEFAULT_Y = 0L;
  public static final Integer DEFAULT_NUM_COLONIES = 0;
  public static final List<Star> DEFAULT_STARS = Collections.emptyList();
  public static final List<Colony> DEFAULT_COLONIES = Collections.emptyList();
  public static final List<Fleet> DEFAULT_FLEETS = Collections.emptyList();

  /**
   * these are the (x,y) coordinates of the sector. (0,0) is the "centre" of the universe,
   * (1,1) is one sector up and to the right, and so on.
   */
  @ProtoField(tag = 1, type = INT64)
  public final Long x;

  @ProtoField(tag = 2, type = INT64)
  public final Long y;

  /**
   * number of colonies in this sector
   */
  @ProtoField(tag = 5, type = INT32)
  public final Integer num_colonies;

  /**
   * the collection of stars in this sector.
   */
  @ProtoField(tag = 3, label = REPEATED)
  public final List<Star> stars;

  /**
   * a collection of colonies in this sector (TODO: full colony details? probably not needed...)
   */
  @ProtoField(tag = 4, label = REPEATED)
  public final List<Colony> colonies;

  /**
   * a collection of fleets in this sector
   */
  @ProtoField(tag = 6, label = REPEATED)
  public final List<Fleet> fleets;

  public Sector(Long x, Long y, Integer num_colonies, List<Star> stars, List<Colony> colonies, List<Fleet> fleets) {
    this.x = x;
    this.y = y;
    this.num_colonies = num_colonies;
    this.stars = immutableCopyOf(stars);
    this.colonies = immutableCopyOf(colonies);
    this.fleets = immutableCopyOf(fleets);
  }

  private Sector(Builder builder) {
    this(builder.x, builder.y, builder.num_colonies, builder.stars, builder.colonies, builder.fleets);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Sector)) return false;
    Sector o = (Sector) other;
    return equals(x, o.x)
        && equals(y, o.y)
        && equals(num_colonies, o.num_colonies)
        && equals(stars, o.stars)
        && equals(colonies, o.colonies)
        && equals(fleets, o.fleets);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = x != null ? x.hashCode() : 0;
      result = result * 37 + (y != null ? y.hashCode() : 0);
      result = result * 37 + (num_colonies != null ? num_colonies.hashCode() : 0);
      result = result * 37 + (stars != null ? stars.hashCode() : 1);
      result = result * 37 + (colonies != null ? colonies.hashCode() : 1);
      result = result * 37 + (fleets != null ? fleets.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Sector> {

    public Long x;
    public Long y;
    public Integer num_colonies;
    public List<Star> stars;
    public List<Colony> colonies;
    public List<Fleet> fleets;

    public Builder() {
    }

    public Builder(Sector message) {
      super(message);
      if (message == null) return;
      this.x = message.x;
      this.y = message.y;
      this.num_colonies = message.num_colonies;
      this.stars = copyOf(message.stars);
      this.colonies = copyOf(message.colonies);
      this.fleets = copyOf(message.fleets);
    }

    /**
     * these are the (x,y) coordinates of the sector. (0,0) is the "centre" of the universe,
     * (1,1) is one sector up and to the right, and so on.
     */
    public Builder x(Long x) {
      this.x = x;
      return this;
    }

    public Builder y(Long y) {
      this.y = y;
      return this;
    }

    /**
     * number of colonies in this sector
     */
    public Builder num_colonies(Integer num_colonies) {
      this.num_colonies = num_colonies;
      return this;
    }

    /**
     * the collection of stars in this sector.
     */
    public Builder stars(List<Star> stars) {
      this.stars = checkForNulls(stars);
      return this;
    }

    /**
     * a collection of colonies in this sector (TODO: full colony details? probably not needed...)
     */
    public Builder colonies(List<Colony> colonies) {
      this.colonies = checkForNulls(colonies);
      return this;
    }

    /**
     * a collection of fleets in this sector
     */
    public Builder fleets(List<Fleet> fleets) {
      this.fleets = checkForNulls(fleets);
      return this;
    }

    @Override
    public Sector build() {
      return new Sector(this);
    }
  }
}
