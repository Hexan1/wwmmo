// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.messages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class FleetOrder extends Message {

  public static final FLEET_ORDER DEFAULT_ORDER = FLEET_ORDER.SPLIT;
  public static final Integer DEFAULT_SPLIT_LEFT = 0;
  public static final Integer DEFAULT_SPLIT_RIGHT = 0;
  public static final String DEFAULT_STAR_KEY = "";
  public static final Fleet.FLEET_STANCE DEFAULT_STANCE = Fleet.FLEET_STANCE.PASSIVE;
  public static final String DEFAULT_MERGE_FLEET_KEY = "";
  public static final Long DEFAULT_SECTOR_X = 0L;
  public static final Long DEFAULT_SECTOR_Y = 0L;
  public static final Integer DEFAULT_OFFSET_X = 0;
  public static final Integer DEFAULT_OFFSET_Y = 0;

  @ProtoField(tag = 1, type = ENUM)
  public final FLEET_ORDER order;

  /**
   * if the order is to split, this will be the number of ships
   * in the "left" and "right" fleets. The numbers must add up to
   * the original number of ships you had.
   */
  @ProtoField(tag = 2, type = INT32)
  public final Integer split_left;

  @ProtoField(tag = 3, type = INT32)
  public final Integer split_right;

  /**
   * when moving or attacking, this represents the destination star
   */
  @ProtoField(tag = 4, type = STRING)
  public final String star_key;

  /**
   * if the order is SET_STANCE, this will be the stance we want to change to
   */
  @ProtoField(tag = 5, type = ENUM)
  public final Fleet.FLEET_STANCE stance;

  /**
   * if the order is MERGE, this will be the fleet to merge with
   */
  @ProtoField(tag = 6, type = STRING)
  public final String merge_fleet_key;

  /**
   * if it's a move command, but to empty space and not a star (e.g. for wormhole generators),
   * then this represents the coordinates you want to move to
   */
  @ProtoField(tag = 7, type = INT64)
  public final Long sector_x;

  @ProtoField(tag = 8, type = INT64)
  public final Long sector_y;

  @ProtoField(tag = 9, type = INT32)
  public final Integer offset_x;

  @ProtoField(tag = 10, type = INT32)
  public final Integer offset_y;

  public FleetOrder(FLEET_ORDER order, Integer split_left, Integer split_right, String star_key, Fleet.FLEET_STANCE stance, String merge_fleet_key, Long sector_x, Long sector_y, Integer offset_x, Integer offset_y) {
    this.order = order;
    this.split_left = split_left;
    this.split_right = split_right;
    this.star_key = star_key;
    this.stance = stance;
    this.merge_fleet_key = merge_fleet_key;
    this.sector_x = sector_x;
    this.sector_y = sector_y;
    this.offset_x = offset_x;
    this.offset_y = offset_y;
  }

  private FleetOrder(Builder builder) {
    this(builder.order, builder.split_left, builder.split_right, builder.star_key, builder.stance, builder.merge_fleet_key, builder.sector_x, builder.sector_y, builder.offset_x, builder.offset_y);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FleetOrder)) return false;
    FleetOrder o = (FleetOrder) other;
    return equals(order, o.order)
        && equals(split_left, o.split_left)
        && equals(split_right, o.split_right)
        && equals(star_key, o.star_key)
        && equals(stance, o.stance)
        && equals(merge_fleet_key, o.merge_fleet_key)
        && equals(sector_x, o.sector_x)
        && equals(sector_y, o.sector_y)
        && equals(offset_x, o.offset_x)
        && equals(offset_y, o.offset_y);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = order != null ? order.hashCode() : 0;
      result = result * 37 + (split_left != null ? split_left.hashCode() : 0);
      result = result * 37 + (split_right != null ? split_right.hashCode() : 0);
      result = result * 37 + (star_key != null ? star_key.hashCode() : 0);
      result = result * 37 + (stance != null ? stance.hashCode() : 0);
      result = result * 37 + (merge_fleet_key != null ? merge_fleet_key.hashCode() : 0);
      result = result * 37 + (sector_x != null ? sector_x.hashCode() : 0);
      result = result * 37 + (sector_y != null ? sector_y.hashCode() : 0);
      result = result * 37 + (offset_x != null ? offset_x.hashCode() : 0);
      result = result * 37 + (offset_y != null ? offset_y.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<FleetOrder> {

    public FLEET_ORDER order;
    public Integer split_left;
    public Integer split_right;
    public String star_key;
    public Fleet.FLEET_STANCE stance;
    public String merge_fleet_key;
    public Long sector_x;
    public Long sector_y;
    public Integer offset_x;
    public Integer offset_y;

    public Builder() {
    }

    public Builder(FleetOrder message) {
      super(message);
      if (message == null) return;
      this.order = message.order;
      this.split_left = message.split_left;
      this.split_right = message.split_right;
      this.star_key = message.star_key;
      this.stance = message.stance;
      this.merge_fleet_key = message.merge_fleet_key;
      this.sector_x = message.sector_x;
      this.sector_y = message.sector_y;
      this.offset_x = message.offset_x;
      this.offset_y = message.offset_y;
    }

    public Builder order(FLEET_ORDER order) {
      this.order = order;
      return this;
    }

    /**
     * if the order is to split, this will be the number of ships
     * in the "left" and "right" fleets. The numbers must add up to
     * the original number of ships you had.
     */
    public Builder split_left(Integer split_left) {
      this.split_left = split_left;
      return this;
    }

    public Builder split_right(Integer split_right) {
      this.split_right = split_right;
      return this;
    }

    /**
     * when moving or attacking, this represents the destination star
     */
    public Builder star_key(String star_key) {
      this.star_key = star_key;
      return this;
    }

    /**
     * if the order is SET_STANCE, this will be the stance we want to change to
     */
    public Builder stance(Fleet.FLEET_STANCE stance) {
      this.stance = stance;
      return this;
    }

    /**
     * if the order is MERGE, this will be the fleet to merge with
     */
    public Builder merge_fleet_key(String merge_fleet_key) {
      this.merge_fleet_key = merge_fleet_key;
      return this;
    }

    /**
     * if it's a move command, but to empty space and not a star (e.g. for wormhole generators),
     * then this represents the coordinates you want to move to
     */
    public Builder sector_x(Long sector_x) {
      this.sector_x = sector_x;
      return this;
    }

    public Builder sector_y(Long sector_y) {
      this.sector_y = sector_y;
      return this;
    }

    public Builder offset_x(Integer offset_x) {
      this.offset_x = offset_x;
      return this;
    }

    public Builder offset_y(Integer offset_y) {
      this.offset_y = offset_y;
      return this;
    }

    @Override
    public FleetOrder build() {
      return new FleetOrder(this);
    }
  }

  public enum FLEET_ORDER
      implements ProtoEnum {
    SPLIT(1),
    MERGE(2),
    MOVE(3),
    SET_STANCE(5),
    BOOST(6),
    ENTER_WORMHOLE(7);

    private final int value;

    private FLEET_ORDER(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }
}
