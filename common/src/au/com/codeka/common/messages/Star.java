// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.messages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

/**
 *
 * Represents a single star within a sector. The star can have a few planets, though this
 * is optional (we don't always return the list of planets with a star).
 */
public final class Star extends Message {

  public static final String DEFAULT_KEY = "";
  public static final Long DEFAULT_SECTOR_X = 0L;
  public static final Long DEFAULT_SECTOR_Y = 0L;
  public static final String DEFAULT_NAME = "";
  public static final CLASSIFICATION DEFAULT_CLASSIFICATION = CLASSIFICATION.BLUE;
  public static final Integer DEFAULT_SIZE = 0;
  public static final Integer DEFAULT_OFFSET_X = 0;
  public static final Integer DEFAULT_OFFSET_Y = 0;
  public static final List<Planet> DEFAULT_PLANETS = Collections.emptyList();
  public static final List<Colony> DEFAULT_COLONIES = Collections.emptyList();
  public static final List<Building> DEFAULT_BUILDINGS = Collections.emptyList();
  public static final List<EmpirePresence> DEFAULT_EMPIRES = Collections.emptyList();
  public static final List<BuildRequest> DEFAULT_BUILD_REQUESTS = Collections.emptyList();
  public static final List<Fleet> DEFAULT_FLEETS = Collections.emptyList();
  public static final Long DEFAULT_TIME_EMPTIED = 0L;
  public static final Long DEFAULT_LAST_SIMULATION = 0L;

  /**
   * the identifier of the star, unique throughout the universe.
   */
  @ProtoField(tag = 1, type = STRING)
  public final String key;

  /**
   * the sector this star is contained within
   */
  @ProtoField(tag = 11, type = INT64)
  public final Long sector_x;

  @ProtoField(tag = 12, type = INT64)
  public final Long sector_y;

  /**
   * the name of the star
   */
  @ProtoField(tag = 2, type = STRING)
  public final String name;

  @ProtoField(tag = 3, type = ENUM)
  public final CLASSIFICATION classification;

  /**
   * the apparent "size" of the star (which is really just a display thing)
   */
  @ProtoField(tag = 5, type = INT32)
  public final Integer size;

  /**
   * the offset from the left edge of the sector, in pixels
   */
  @ProtoField(tag = 6, type = INT32)
  public final Integer offset_x;

  /**
   * the offset from the bottom edge of the sector, in pixels
   */
  @ProtoField(tag = 7, type = INT32)
  public final Integer offset_y;

  /**
   * the collection of planets orbiting this star (may be empty, for example in the list
   * of stars in a sector)
   */
  @ProtoField(tag = 9, label = REPEATED)
  public final List<Planet> planets;

  /**
   * collection of colonies on our planet(s)
   */
  @ProtoField(tag = 10, label = REPEATED)
  public final List<Colony> colonies;

  /**
   * collection of buildings in our colonies.
   */
  @ProtoField(tag = 13, label = REPEATED)
  public final List<Building> buildings;

  /**
   * collection of EmpirePresences details the presences of the empire(s) in this solar system.
   */
  @ProtoField(tag = 14, label = REPEATED)
  public final List<EmpirePresence> empires;

  /**
   * collection of BuildRequests for colonies in this star
   */
  @ProtoField(tag = 15, label = REPEATED)
  public final List<BuildRequest> build_requests;

  /**
   * List of fleets located in this star
   */
  @ProtoField(tag = 16, label = REPEATED)
  public final List<Fleet> fleets;

  /**
   * This is the time (in seconds since Unix epoch) since this star "became" empty -- that is,
   * after the colony was destroyed. This only has meaning if the star has no colonies currently.
   */
  @ProtoField(tag = 17, type = INT64)
  public final Long time_emptied;

  /**
   * Time, that this star was last simulated
   */
  @ProtoField(tag = 18, type = INT64)
  public final Long last_simulation;

  /**
   * If we're in the middle of combat, this will be the combat report for what's currently
   * going on.
   */
  @ProtoField(tag = 19)
  public final CombatReport current_combat_report;

  @ProtoField(tag = 20)
  public final StarExtra extra;

  public Star(String key, Long sector_x, Long sector_y, String name, CLASSIFICATION classification, Integer size, Integer offset_x, Integer offset_y, List<Planet> planets, List<Colony> colonies, List<Building> buildings, List<EmpirePresence> empires, List<BuildRequest> build_requests, List<Fleet> fleets, Long time_emptied, Long last_simulation, CombatReport current_combat_report, StarExtra extra) {
    this.key = key;
    this.sector_x = sector_x;
    this.sector_y = sector_y;
    this.name = name;
    this.classification = classification;
    this.size = size;
    this.offset_x = offset_x;
    this.offset_y = offset_y;
    this.planets = immutableCopyOf(planets);
    this.colonies = immutableCopyOf(colonies);
    this.buildings = immutableCopyOf(buildings);
    this.empires = immutableCopyOf(empires);
    this.build_requests = immutableCopyOf(build_requests);
    this.fleets = immutableCopyOf(fleets);
    this.time_emptied = time_emptied;
    this.last_simulation = last_simulation;
    this.current_combat_report = current_combat_report;
    this.extra = extra;
  }

  private Star(Builder builder) {
    this(builder.key, builder.sector_x, builder.sector_y, builder.name, builder.classification, builder.size, builder.offset_x, builder.offset_y, builder.planets, builder.colonies, builder.buildings, builder.empires, builder.build_requests, builder.fleets, builder.time_emptied, builder.last_simulation, builder.current_combat_report, builder.extra);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Star)) return false;
    Star o = (Star) other;
    return equals(key, o.key)
        && equals(sector_x, o.sector_x)
        && equals(sector_y, o.sector_y)
        && equals(name, o.name)
        && equals(classification, o.classification)
        && equals(size, o.size)
        && equals(offset_x, o.offset_x)
        && equals(offset_y, o.offset_y)
        && equals(planets, o.planets)
        && equals(colonies, o.colonies)
        && equals(buildings, o.buildings)
        && equals(empires, o.empires)
        && equals(build_requests, o.build_requests)
        && equals(fleets, o.fleets)
        && equals(time_emptied, o.time_emptied)
        && equals(last_simulation, o.last_simulation)
        && equals(current_combat_report, o.current_combat_report)
        && equals(extra, o.extra);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = key != null ? key.hashCode() : 0;
      result = result * 37 + (sector_x != null ? sector_x.hashCode() : 0);
      result = result * 37 + (sector_y != null ? sector_y.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (classification != null ? classification.hashCode() : 0);
      result = result * 37 + (size != null ? size.hashCode() : 0);
      result = result * 37 + (offset_x != null ? offset_x.hashCode() : 0);
      result = result * 37 + (offset_y != null ? offset_y.hashCode() : 0);
      result = result * 37 + (planets != null ? planets.hashCode() : 1);
      result = result * 37 + (colonies != null ? colonies.hashCode() : 1);
      result = result * 37 + (buildings != null ? buildings.hashCode() : 1);
      result = result * 37 + (empires != null ? empires.hashCode() : 1);
      result = result * 37 + (build_requests != null ? build_requests.hashCode() : 1);
      result = result * 37 + (fleets != null ? fleets.hashCode() : 1);
      result = result * 37 + (time_emptied != null ? time_emptied.hashCode() : 0);
      result = result * 37 + (last_simulation != null ? last_simulation.hashCode() : 0);
      result = result * 37 + (current_combat_report != null ? current_combat_report.hashCode() : 0);
      result = result * 37 + (extra != null ? extra.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Star> {

    public String key;
    public Long sector_x;
    public Long sector_y;
    public String name;
    public CLASSIFICATION classification;
    public Integer size;
    public Integer offset_x;
    public Integer offset_y;
    public List<Planet> planets;
    public List<Colony> colonies;
    public List<Building> buildings;
    public List<EmpirePresence> empires;
    public List<BuildRequest> build_requests;
    public List<Fleet> fleets;
    public Long time_emptied;
    public Long last_simulation;
    public CombatReport current_combat_report;
    public StarExtra extra;

    public Builder() {
    }

    public Builder(Star message) {
      super(message);
      if (message == null) return;
      this.key = message.key;
      this.sector_x = message.sector_x;
      this.sector_y = message.sector_y;
      this.name = message.name;
      this.classification = message.classification;
      this.size = message.size;
      this.offset_x = message.offset_x;
      this.offset_y = message.offset_y;
      this.planets = copyOf(message.planets);
      this.colonies = copyOf(message.colonies);
      this.buildings = copyOf(message.buildings);
      this.empires = copyOf(message.empires);
      this.build_requests = copyOf(message.build_requests);
      this.fleets = copyOf(message.fleets);
      this.time_emptied = message.time_emptied;
      this.last_simulation = message.last_simulation;
      this.current_combat_report = message.current_combat_report;
      this.extra = message.extra;
    }

    /**
     * the identifier of the star, unique throughout the universe.
     */
    public Builder key(String key) {
      this.key = key;
      return this;
    }

    /**
     * the sector this star is contained within
     */
    public Builder sector_x(Long sector_x) {
      this.sector_x = sector_x;
      return this;
    }

    public Builder sector_y(Long sector_y) {
      this.sector_y = sector_y;
      return this;
    }

    /**
     * the name of the star
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder classification(CLASSIFICATION classification) {
      this.classification = classification;
      return this;
    }

    /**
     * the apparent "size" of the star (which is really just a display thing)
     */
    public Builder size(Integer size) {
      this.size = size;
      return this;
    }

    /**
     * the offset from the left edge of the sector, in pixels
     */
    public Builder offset_x(Integer offset_x) {
      this.offset_x = offset_x;
      return this;
    }

    /**
     * the offset from the bottom edge of the sector, in pixels
     */
    public Builder offset_y(Integer offset_y) {
      this.offset_y = offset_y;
      return this;
    }

    /**
     * the collection of planets orbiting this star (may be empty, for example in the list
     * of stars in a sector)
     */
    public Builder planets(List<Planet> planets) {
      this.planets = checkForNulls(planets);
      return this;
    }

    /**
     * collection of colonies on our planet(s)
     */
    public Builder colonies(List<Colony> colonies) {
      this.colonies = checkForNulls(colonies);
      return this;
    }

    /**
     * collection of buildings in our colonies.
     */
    public Builder buildings(List<Building> buildings) {
      this.buildings = checkForNulls(buildings);
      return this;
    }

    /**
     * collection of EmpirePresences details the presences of the empire(s) in this solar system.
     */
    public Builder empires(List<EmpirePresence> empires) {
      this.empires = checkForNulls(empires);
      return this;
    }

    /**
     * collection of BuildRequests for colonies in this star
     */
    public Builder build_requests(List<BuildRequest> build_requests) {
      this.build_requests = checkForNulls(build_requests);
      return this;
    }

    /**
     * List of fleets located in this star
     */
    public Builder fleets(List<Fleet> fleets) {
      this.fleets = checkForNulls(fleets);
      return this;
    }

    /**
     * This is the time (in seconds since Unix epoch) since this star "became" empty -- that is,
     * after the colony was destroyed. This only has meaning if the star has no colonies currently.
     */
    public Builder time_emptied(Long time_emptied) {
      this.time_emptied = time_emptied;
      return this;
    }

    /**
     * Time, that this star was last simulated
     */
    public Builder last_simulation(Long last_simulation) {
      this.last_simulation = last_simulation;
      return this;
    }

    /**
     * If we're in the middle of combat, this will be the combat report for what's currently
     * going on.
     */
    public Builder current_combat_report(CombatReport current_combat_report) {
      this.current_combat_report = current_combat_report;
      return this;
    }

    public Builder extra(StarExtra extra) {
      this.extra = extra;
      return this;
    }

    @Override
    public Star build() {
      return new Star(this);
    }
  }

  public enum CLASSIFICATION
      implements ProtoEnum {
    BLUE(0),
    WHITE(1),
    YELLOW(2),
    ORANGE(3),
    RED(4),
    NEUTRON(5),
    BLACKHOLE(6),
    MARKER(7),
    WORMHOLE(8);

    private final int value;

    private CLASSIFICATION(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  /**
   * These are extra details stored with a star, usually specific to the type of star it is.
   */
  public static final class StarExtra extends Message {

    public static final Integer DEFAULT_WORMHOLE_DEST_STAR_ID = 0;
    public static final Long DEFAULT_WORMHOLE_TUNE_COMPLETE_TIME = 0L;
    public static final List<Long> DEFAULT_WORMHOLE_TUNE_HISTORY = Collections.emptyList();
    public static final Integer DEFAULT_WORMHOLE_EMPIRE_ID = 0;

    /**
     * The following are used by wormholes to store their state.
     */
    @ProtoField(tag = 1, type = INT32)
    public final Integer wormhole_dest_star_id;

    @ProtoField(tag = 2, type = INT64)
    public final Long wormhole_tune_complete_time;

    @ProtoField(tag = 3, type = INT64, label = REPEATED)
    public final List<Long> wormhole_tune_history;

    @ProtoField(tag = 4, type = INT32)
    public final Integer wormhole_empire_id;

    public StarExtra(Integer wormhole_dest_star_id, Long wormhole_tune_complete_time, List<Long> wormhole_tune_history, Integer wormhole_empire_id) {
      this.wormhole_dest_star_id = wormhole_dest_star_id;
      this.wormhole_tune_complete_time = wormhole_tune_complete_time;
      this.wormhole_tune_history = immutableCopyOf(wormhole_tune_history);
      this.wormhole_empire_id = wormhole_empire_id;
    }

    private StarExtra(Builder builder) {
      this(builder.wormhole_dest_star_id, builder.wormhole_tune_complete_time, builder.wormhole_tune_history, builder.wormhole_empire_id);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof StarExtra)) return false;
      StarExtra o = (StarExtra) other;
      return equals(wormhole_dest_star_id, o.wormhole_dest_star_id)
          && equals(wormhole_tune_complete_time, o.wormhole_tune_complete_time)
          && equals(wormhole_tune_history, o.wormhole_tune_history)
          && equals(wormhole_empire_id, o.wormhole_empire_id);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = wormhole_dest_star_id != null ? wormhole_dest_star_id.hashCode() : 0;
        result = result * 37 + (wormhole_tune_complete_time != null ? wormhole_tune_complete_time.hashCode() : 0);
        result = result * 37 + (wormhole_tune_history != null ? wormhole_tune_history.hashCode() : 1);
        result = result * 37 + (wormhole_empire_id != null ? wormhole_empire_id.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<StarExtra> {

      public Integer wormhole_dest_star_id;
      public Long wormhole_tune_complete_time;
      public List<Long> wormhole_tune_history;
      public Integer wormhole_empire_id;

      public Builder() {
      }

      public Builder(StarExtra message) {
        super(message);
        if (message == null) return;
        this.wormhole_dest_star_id = message.wormhole_dest_star_id;
        this.wormhole_tune_complete_time = message.wormhole_tune_complete_time;
        this.wormhole_tune_history = copyOf(message.wormhole_tune_history);
        this.wormhole_empire_id = message.wormhole_empire_id;
      }

      /**
       * The following are used by wormholes to store their state.
       */
      public Builder wormhole_dest_star_id(Integer wormhole_dest_star_id) {
        this.wormhole_dest_star_id = wormhole_dest_star_id;
        return this;
      }

      public Builder wormhole_tune_complete_time(Long wormhole_tune_complete_time) {
        this.wormhole_tune_complete_time = wormhole_tune_complete_time;
        return this;
      }

      public Builder wormhole_tune_history(List<Long> wormhole_tune_history) {
        this.wormhole_tune_history = checkForNulls(wormhole_tune_history);
        return this;
      }

      public Builder wormhole_empire_id(Integer wormhole_empire_id) {
        this.wormhole_empire_id = wormhole_empire_id;
        return this;
      }

      @Override
      public StarExtra build() {
        return new StarExtra(this);
      }
    }
  }
}
