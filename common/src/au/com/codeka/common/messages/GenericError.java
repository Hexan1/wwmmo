// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.messages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;

/**
 *
 * Some methods will return this in the case of an error, so we can display a meaningful error
 * to the user.
 */
public final class GenericError extends Message {

  public static final Integer DEFAULT_ERROR_CODE = 0;
  public static final String DEFAULT_ERROR_MESSAGE = "";

  @ProtoField(tag = 1, type = INT32)
  public final Integer error_code;

  @ProtoField(tag = 2, type = STRING)
  public final String error_message;

  public GenericError(Integer error_code, String error_message) {
    this.error_code = error_code;
    this.error_message = error_message;
  }

  private GenericError(Builder builder) {
    this(builder.error_code, builder.error_message);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GenericError)) return false;
    GenericError o = (GenericError) other;
    return equals(error_code, o.error_code)
        && equals(error_message, o.error_message);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = error_code != null ? error_code.hashCode() : 0;
      result = result * 37 + (error_message != null ? error_message.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GenericError> {

    public Integer error_code;
    public String error_message;

    public Builder() {
    }

    public Builder(GenericError message) {
      super(message);
      if (message == null) return;
      this.error_code = message.error_code;
      this.error_message = message.error_message;
    }

    public Builder error_code(Integer error_code) {
      this.error_code = error_code;
      return this;
    }

    public Builder error_message(String error_message) {
      this.error_message = error_message;
      return this;
    }

    @Override
    public GenericError build() {
      return new GenericError(this);
    }
  }

  public enum ErrorCode
      implements ProtoEnum {
    UnknownError(15),
    InsufficientCash(1),
    CannotAttackOwnColony(2),
    CannotAttackColonyGone(7),
    CannotBuildDependencyNotMet(3),
    CannotBuildMaxPerColonyReached(4),
    CannotBuildMaxPerEmpireReached(8),
    CannotBuildMaxLevelReached(5),
    RenameStarOldNameIncorrect(6),
    CannotCreateEmpireDuplicateName(9),
    CannotCreateEmpireBlankName(10),
    CannotSplitFleetUnequalSizes(11),
    CannotOrderFleetNotIdle(12),
    CannotMergeFleetDifferentDesign(13),
    CannotCollectTaxesAlreadyInProgress(14),
    CannotColonizePlanetAlreadyHasColony(16),
    CannotColonizePlanetNoColonyShips(17),
    InvalidImage(18),
    ShieldImageTooBig(19),
    EmpireNameExists(20),
    InvalidConversation(21),
    EmpireAlreadyInConversation(22),
    EmpireBanned(23),
    FleetBoostNoUpgrade(24),
    FleetBoostAlreadyBoosting(25),
    FleetBoostNotMoving(26),
    FleetMoveCannotMoveToEmptySpace(27),
    FleetMoveCannotMoveToStar(28),
    FleetNotOnWormhole(29),
    WormholeNotTuned(30),
    WormholeTooClose(31),
    FleetMoveTooCloseToStar(32),
    CannotVoteOnNonPendingRequest(33);

    private final int value;

    private ErrorCode(int value) {
      this.value = value;
    }

    @Override
    public int getValue() {
      return value;
    }
  }
}
