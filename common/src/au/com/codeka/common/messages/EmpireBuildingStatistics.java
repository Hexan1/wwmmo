// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./messages.proto
package au.com.codeka.common.messages;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

/**
 *
 * Contains a mapping of building designs to the number of buildings of that design in
 * your empire. Used to decide whether you can build a certain building, when it has
 * a "maxPerEmpire" restriction.
 */
public final class EmpireBuildingStatistics extends Message {

  public static final List<DesignCount> DEFAULT_COUNTS = Collections.emptyList();

  @ProtoField(tag = 1, label = REPEATED)
  public final List<DesignCount> counts;

  public EmpireBuildingStatistics(List<DesignCount> counts) {
    this.counts = immutableCopyOf(counts);
  }

  private EmpireBuildingStatistics(Builder builder) {
    this(builder.counts);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof EmpireBuildingStatistics)) return false;
    return equals(counts, ((EmpireBuildingStatistics) other).counts);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    return result != 0 ? result : (hashCode = counts != null ? counts.hashCode() : 1);
  }

  public static final class Builder extends Message.Builder<EmpireBuildingStatistics> {

    public List<DesignCount> counts;

    public Builder() {
    }

    public Builder(EmpireBuildingStatistics message) {
      super(message);
      if (message == null) return;
      this.counts = copyOf(message.counts);
    }

    public Builder counts(List<DesignCount> counts) {
      this.counts = checkForNulls(counts);
      return this;
    }

    @Override
    public EmpireBuildingStatistics build() {
      return new EmpireBuildingStatistics(this);
    }
  }

  public static final class DesignCount extends Message {

    public static final String DEFAULT_DESIGN_ID = "";
    public static final Integer DEFAULT_NUM_BUILDINGS = 0;

    @ProtoField(tag = 1, type = STRING)
    public final String design_id;

    @ProtoField(tag = 2, type = INT32)
    public final Integer num_buildings;

    public DesignCount(String design_id, Integer num_buildings) {
      this.design_id = design_id;
      this.num_buildings = num_buildings;
    }

    private DesignCount(Builder builder) {
      this(builder.design_id, builder.num_buildings);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof DesignCount)) return false;
      DesignCount o = (DesignCount) other;
      return equals(design_id, o.design_id)
          && equals(num_buildings, o.num_buildings);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = design_id != null ? design_id.hashCode() : 0;
        result = result * 37 + (num_buildings != null ? num_buildings.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<DesignCount> {

      public String design_id;
      public Integer num_buildings;

      public Builder() {
      }

      public Builder(DesignCount message) {
        super(message);
        if (message == null) return;
        this.design_id = message.design_id;
        this.num_buildings = message.num_buildings;
      }

      public Builder design_id(String design_id) {
        this.design_id = design_id;
        return this;
      }

      public Builder num_buildings(Integer num_buildings) {
        this.num_buildings = num_buildings;
        return this;
      }

      @Override
      public DesignCount build() {
        return new DesignCount(this);
      }
    }
  }
}
